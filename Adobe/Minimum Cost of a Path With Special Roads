class Solution {
public:
    int minimumCost(vector<int>& start, vector<int>& target, vector<vector<int>>& specialRoads) {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q;
        vector<int>v(specialRoads.size(), 1e9);
        int ans=abs(start[0]-target[0])+abs(start[1]-target[1]);
        for(int i=0; i<specialRoads.size(); i++){
            q.push({abs(specialRoads[i][2]-target[0])+abs(target[1]-specialRoads[i][3]), i});
        }
        while(!q.empty()){
            int weight=q.top().first, ind=q.top().second;
            q.pop();
            if(v[ind]==1e9){
                v[ind]=min(v[ind], weight);
                for(int i=0; i<specialRoads.size(); i++){
                    if(ind!=i){
                        q.push({weight+abs(specialRoads[ind][0]-specialRoads[i][2])+abs(specialRoads[ind][1]-specialRoads[i][3])+specialRoads[ind][4], i});
                    }
                }
            }
        }
        for(int i=0; i<specialRoads.size(); i++){
            ans=min(ans, abs(specialRoads[i][0]-start[0])+abs(specialRoads[i][1]-start[1])+specialRoads[i][4]+v[i]);
        }
        return ans;
    }
};
