class Solution {
public:
    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
       unordered_map<string, vector<int>> accessMap; 

    for (const auto& access : access_times) {
        string employee = access[0];
        int time = stoi(access[1]);
        accessMap[employee].push_back(time);
    }

    vector<string> result; 
    for (auto& entry : accessMap) {
        vector<int>& times = entry.second;
        sort(times.begin(), times.end()); 

        for (int i = 2; i < times.size(); ++i) {
            if (times[i] - times[i - 2] < 100) {
                result.push_back(entry.first); 
                break;
            }
        }
    }

    return result;
   
    }
};
